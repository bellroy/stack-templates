{-# START_FILE .gitignore #-}
dist*
static/tmp/
static/combined/
*.hi
*.o
.hsenv*
cabal-dev/
.stack-work/
.stack-work-devel/
.cabal-sandbox
cabal.sandbox.config
*.swp
*~
\#*
{{name}}.cabal

{-# START_FILE README.md #-}

{{name}}

## Haskell Setup

1. If you haven't already, [install Stack](https://haskell-lang.org/get-started)
	* On POSIX systems, this is usually `curl -sSL https://get.haskellstack.org/ | sh`
2. Build project: `stack build`

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE stack.yaml #-}
resolver: lts-14.1

{-# START_FILE package.yaml #-}
name: {{name}}
version: "0.1.0.0"
category: "{{category}}{{^category}}category{{/category}}"
author: "{{author-name}}{{^author-name}}author-name{{/author-name}}"
maintainer: {{author-email}}{{^author-email}}author-email{{/author-email}}
copyright: "{{copyright}}{{^copyright}}copyright{{/copyright}}"
github: "{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}"
extra-source-files:
- README.md

ghc-options:
- -Wall
- -Wcompat
- -Widentities
- -Wimplicit-prelude
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wredundant-constraints
- -Wpartial-fields
- -Wtabs
- -Wmissing-local-signatures
- -fhelpful-errors

default-extensions:
- ApplicativeDo
- BangPatterns
- ConstraintKinds
- DataKinds
- DefaultSignatures
- DeriveFoldable
- DeriveFunctor
- DeriveGeneric
- DeriveLift
- DeriveTraversable
- DerivingStrategies
- DoAndIfThenElse
- EmptyCase
- EmptyDataDecls
- ExistentialQuantification
- FlexibleContexts
- FlexibleInstances
- FunctionalDependencies
- GADTs
- GeneralizedNewtypeDeriving
- InstanceSigs
- KindSignatures
- LambdaCase
- MonadFailDesugaring
- MultiParamTypeClasses
- MultiWayIf
- NamedFieldPuns
- NoImplicitPrelude
- OverloadedLabels
- OverloadedStrings
- PatternSynonyms
- RankNTypes
- ScopedTypeVariables
- StandaloneDeriving
- TupleSections
- TypeApplications
- TypeFamilies
- TypeFamilyDependencies
- TypeSynonymInstances
- TypeOperators

dependencies:
- base
- protolude

_common-deps: &common-deps
  - exceptions
  - protolude
  - text

library:
  source-dirs: src
  exposed-modules:
  - Main
  dependencies: *common-deps

internal-libraries:
  {{name}}-internal:
    source-dirs: src
    exposed-modules:
    - Preamble
    dependencies: *common-deps

executables:
  {{name}}:
    main: App
    source-dirs: app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - optparse-applicative

tests:
  spec:
    main: Main
    source-dirs:
    - test
    dependencies:
    - {{name}}-internal
    - hedgehog
    ghc-options:
    - -threaded

{-# START_FILE floskell.json #-}
{
  "style": "base",
  "extensions": [
    "BangPatterns",
    "ConstraintKinds",
    "DataKinds",
    "DefaultSignatures",
    "DeriveAnyClass",
    "DeriveFoldable",
    "DeriveFunctor",
    "DeriveGeneric",
    "DeriveTraversable",
    "DerivingStrategies",
    "DoAndIfThenElse",
    "EmptyCase",
    "EmptyDataDecls",
    "ExistentialQuantification",
    "FlexibleContexts",
    "FlexibleInstances",
    "FunctionalDependencies",
    "GADTs",
    "GeneralizedNewtypeDeriving",
    "InstanceSigs",
    "KindSignatures",
    "LambdaCase",
    "MultiParamTypeClasses",
    "MultiWayIf",
    "NamedFieldPuns",
    "NoImplicitPrelude",
    "OverloadedLabels",
    "OverloadedStrings",
    "PatternSynonyms",
    "QuasiQuotes",
    "RankNTypes",
    "RecordWildCards",
    "ScopedTypeVariables",
    "StandaloneDeriving",
    "TupleSections",
    "TypeApplications",
    "TypeFamilies",
    "TypeFamilyDependencies",
    "TypeSynonymInstances",
    "TypeOperators",
    "ViewPatterns"
  ],
  "fixities": [
    "infixl 8 <%?>",
    "infixl 8 <%!?>",
    "infixl 8 <?>",
    "infixl 8 <!?>"
  ],
  "formatting": {
    "op": {
      ",": {
        "force-linebreak": false,
        "spaces": "after",
        "linebreaks": "before"
      },
      "=": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "after"
      },
      "@": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "none"
      },
      "default": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "before"
      },
      ". in expression": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "before"
      },
      "-> in expression": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "after"
      },
      ". in type": {
        "force-linebreak": false,
        "spaces": "after",
        "linebreaks": "after"
      },
      "$": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "after"
      },
      "record in pattern": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "none"
      },
      "<*> in expression": {
        "force-linebreak": true,
        "spaces": "both",
        "linebreaks": "before"
      }
    },
    "group": {
      "$(": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "none"
      },
      "[ in pattern": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "after"
      },
      "(# in pattern": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "after"
      },
      "[p|": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "none"
      },
      "default": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "after"
      },
      "( in other": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "after"
      },
      "(# in expression": {
        "force-linebreak": false,
        "spaces": "both",
        "linebreaks": "after"
      },
      "[|": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "none"
      },
      "* in type": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "after"
      },
      "* in pattern": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "after"
      },
      "(": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "after"
      },
      "[d|": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "none"
      },
      "[t|": {
        "force-linebreak": false,
        "spaces": "none",
        "linebreaks": "none"
      }
    },
    "layout": {
      "infix-app": "flex",
      "if": "try-oneline",
      "import-spec-list": "try-oneline",
      "con-decls": "try-oneline",
      "declaration": "flex",
      "app": "try-oneline",
      "let": "try-oneline",
      "record": "try-oneline",
      "type": "try-oneline",
      "export-spec-list": "vertical",
      "list-comp": "try-oneline"
    },
    "penalty": {
      "overfull": 10,
      "indent": 1,
      "overfull-once": 200,
      "max-line-length": 80,
      "linebreak": 100
    },
    "indent": {
      "deriving": 2,
      "if": "align",
      "let-binds": "align",
      "import-spec-list": "align-or-indent-by 2",
      "onside": 2,
      "where": 1,
      "typesig": "align",
      "do": "indent-by 2",
      "app": "align",
      "case": "indent-by 2",
      "let-in": "indent-by 2",
      "where-binds": "indent-by 1",
      "let": "align",
      "export-spec-list": "indent-by 2",
      "multi-if": "indent-by 2",
      "class": "indent-by 2"
    },
    "align": {
      "let-binds": false,
      "where": false,
      "matches": false,
      "limits": [
        10,
        25
      ],
      "case": false,
      "import-module": false,
      "import-spec": false,
      "class": false,
      "record-fields": true
    },
    "options": {
      "sort-pragmas": true,
      "flexible-oneline": true,
      "decl-no-blank-lines": [
        "where"
      ],
      "split-language-pragmas": true,
      "align-sum-type-decl": false,
      "sort-import-lists": true,
      "preserve-vertical-space": false,
      "sort-imports": [
        {
          "prefixes": [
            "Prelude",
            "Preamble",
            "Protolude"
          ],
          "order": "sorted"
        },
        {
          "prefixes": [
            ""
          ],
          "order": "sorted"
        },
        {
          "prefixes": [
            "Test",
            "Hedgehog"
          ],
          "order": "sorted"
        }
      ]
    }
  },
  "language": "Haskell2010"
}

{-# START_FILE .editorconfig #-}
# EditorConfig is awesome: https://EditorConfig.org
root = true

# Unix-style newlines with a newline ending every file
[*]
end_of_line = lf
insert_final_newline = true

# Matches multiple files with brace expansion notation
# Set default charset
[*.{hs}]
charset = utf-8

# 2 space indentation
[*.hs]
indent_style = space
indent_size = 2


{-# START_FILE app/App.hs #-}
module App where

import Protolude

import System.IO (hSetEncoding, stderr, stdout, utf8)
import Options.Applicative

import qualified Main

data Options
  = Options
  { verbose :: Bool
  , config :: FilePath
  }

options :: Parser Options
options = Options
  <$> switch (long "verbose" <> short 'v' <> help "Whether to be verbose")
  <*> commandOption

commandOption :: Parser FilePath
commandOption = strOption
  $ long "config"
  <> metavar "CONFIG_PATH"
  <> help "FS path to config file"
  <> showDefault
  <> value "config.dhall"

main :: IO ()
main = do
  hSetEncoding stdout utf8
  hSetEncoding stderr utf8
  Options { verbose, config } <- execParser opts
  putText $ "Verbose mode is " <> if verbose then "ON" else "OFF"
  putText $ "Using config file: " <> toS config
  Main.run

  where
    opts = info (options <**> helper)
      ( fullDesc
     <> progDesc "Program description goes here <- change it to match your program"
     <> header "Program header goes here <- change it to match your program" )

{-# START_FILE src/Main.hs #-}
module Main (run) where

import Preamble

run :: IO ()
run = putText "It works!"

{-# START_FILE src/Preamble.hs #-}
module Preamble
  ( module Protolude
  , (.!)
  , (.!!)
  , (.!!!)
  , (.!!!!)
  ) where


import Protolude

(.!) :: (b -> c) -> (a -> b) -> a -> c
(.!) = (.)
infixl 8 .!

(.!!) :: (c -> d) -> (a -> b -> c) -> a -> b -> d
(.!!) = (.) . (.)
infixl 8 .!!

(.!!!) :: (d -> e) -> (a -> b -> c -> d) -> a -> b -> c -> e
(.!!!) = (.) . (.) . (.)
infixl 8 .!!!

(.!!!!) :: (e -> f) -> (a -> b -> c -> d -> e) -> a -> b -> c -> d -> f
(.!!!!) = (.) . (.) . (.) . (.)
infixl 8 .!!!!


{-# START_FILE test/Main.hs #-}
module Main where

import Protolude

import System.Exit (exitFailure)
import System.IO (hSetEncoding, stderr, stdout, utf8)

import qualified ExampleSpec (run)


main :: IO ()
main = do
  hSetEncoding stdout utf8
  hSetEncoding stderr utf8
  unlessM (and <$> sequence specs) exitFailure where
    specs = [ ExampleSpec.run ]

{-# START_FILE test/ExampleSpec.hs #-}
module ExampleSpec (run) where

import Hedgehog
import Preamble

import qualified Hedgehog.Gen as Gen
import qualified Hedgehog.Range as Range

run :: IO Bool
run = checkParallel $ Group "ExampleSpec"
  [ exampleProperty
  ]

exampleProperty :: (PropertyName, Property)
exampleProperty = ("Example property",) $ property $ do
  i <- forAll $ Gen.int $ Range.singleton 42
  i === 42

